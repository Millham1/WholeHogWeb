<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8"/>
<meta name="viewport" content="width=device-width,initial-scale=1"/>
<title>Whole Hog Competition 2025 — Leaderboard</title>
<link rel="stylesheet" href="styles.css"/>
<style>
  :root { --wh-header-h: 2.25in; --line:#dcdcdc; }
  body { font-family: system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; margin:0; background:#fafafa; color:#111; }
  header { height:var(--wh-header-h); min-height:var(--wh-header-h); position:relative; display:flex; align-items:center; justify-content:center; background:#fff; }
  header h1 { margin:0; line-height:1.1; text-align:center; }
  header img:first-of-type { position:absolute; left:14px; top:50%; transform:translateY(-50%); height:calc(100% - 20px); width:auto; }
  header img:last-of-type  { position:absolute; right:14px; top:50%; transform:translateY(-50%); height:calc(100% - 20px); width:auto; }

  /* Centered red nav buttons (match your pages) */
  #wholehog-nav{
    max-width: 820px; margin: 12px auto;
    display:flex; justify-content:center; align-items:center;
    gap:12px; flex-wrap:wrap; text-align:center;
  }
  #wholehog-nav a{
    display:inline-flex; align-items:center; justify-content:center; white-space:nowrap;
    padding:10px 14px; border-radius:10px; min-width:180px;
    background:#e53935; color:#000; font-weight:800; border:2px solid #000; text-decoration:none;
  }
  #wholehog-nav a:hover{ filter:brightness(0.92); }

  .container { max-width:1100px; margin:18px auto 28px; padding:0 14px; }
  .card { border:1px solid var(--line); border-radius:12px; padding:14px; background:#fff; }
  .card + .card { margin-top:16px; }
  .card h2 { margin:0 0 10px 0; }
  .muted { color:#666; font-size:12px; }

  .list .row { border-top:1px dashed #e3e3e3; padding:10px 2px; display:flex; align-items:center; gap:12px; flex-wrap:wrap; }
  .list .row:first-child { border-top:none; }
  .list .row > div:nth-child(1) { min-width:260px; }
  .list .row .score { font-weight:800; font-size:22px; min-width:90px; text-align:right; margin-left:auto; }
  .badge { display:inline-block; padding:2px 6px; border:1px solid #bbb; border-radius:8px; font-size:11px; color:#444; background:#f5f5f5; vertical-align:middle; }
  .btn { display:inline-flex; align-items:center; justify-content:center; padding:8px 12px; border-radius:8px; border:1px solid #000; background:#e53935; color:#000; font-weight:800; text-decoration:none; cursor:pointer; }
  .btn:hover{ filter:brightness(0.93); }
  .chip { font-size:12px; color:#333; }
</style>
</head>
<body>
  <header class="header">
    <img src="Legion whole hog logo.png" alt="Logo" onerror="this.style.display='none'"/>
    <h1>Leaderboard</h1>
    <img src="AL Medallion.png" alt="Logo" onerror="this.style.display='none'"/>
  </header>

  <nav id="wholehog-nav">
    <a href="./landing.html">Go to Landing</a>
    <a href="./onsite.html">Go to On-Site</a>
    <a href="./blind.html">Go to Blind Taste</a>
    <a href="./sauce.html">Go to Sauce Tasting</a>
  </nav>

  <main class="container">
    <section class="card" id="onsite-card">
      <h2>On-site Leaders</h2>
      <div class="muted">
        Totals are the <strong>sum of all judges’ category points</strong>.
        Tie-breaker: <strong>Meat &amp; Sauce Taste → Skin → Moisture</strong>.
        (Chip toggle intentionally removed for On-site.)
      </div>
      <div id="onsite-list" class="list"></div>
    </section>

    <section class="card" id="blind-card">
      <h2>Blind Tasting</h2>
      <div class="muted">Totals are the <strong>sum</strong> of all judges’ blind scores (no averaging).</div>
      <div id="blind-list" class="list"></div>
    </section>

    <section class="card" id="sauce-card">
      <h2>Sauce Tasting</h2>
      <div class="muted">Totals are the <strong>sum</strong> of all judges’ sauce scores (no averaging).</div>
      <div id="sauce-list" class="list"></div>
    </section>
  </main>

  <script>
  (function(){
    const $  = s => document.querySelector(s);

    // Robust storage readers (accepts earlier key names you used)
    const KEYS = {
      onsite: ['onsiteScores','wh_onSite','wh_onsite','wh_Onsite','onSiteScores'],
      blind:  ['blindScores','blindEntries','wh_blind','wh_Blind'],
      sauce:  ['sauceScores','wh_sauce','wh_Sauce'],
      chips:  ['wh_chipByTeam','chipByTeam','wh_chip_map']
    };
    const readFirstArray = (keys)=>{
      for (const k of keys){ const raw = localStorage.getItem(k);
        if (raw && raw.length>2){ try { return JSON.parse(raw); } catch{} }
      }
      return [];
    };
    const readFirstMap = (keys)=>{
      for (const k of keys){ const raw = localStorage.getItem(k);
        if (raw && raw.length>2){ try { return JSON.parse(raw); } catch{} }
      }
      return {};
    };

    const toInt = v => {
      const n = Number(v);
      return Number.isFinite(n) ? Math.trunc(n) : 0;   // **no rounding of totals; snap each judge entry to an int**
    };
    const teamOf = r => (r.team || r.teamName || '').toString().trim();

    // --- On-site: category aliases + correct tie-breaker (Meat&Sauce → Skin → Moisture) ---
    const ALIAS = {
      meatSauce: ['meatSauce','meat_sauce','meatSauceTaste','meat_and_sauce','meat&Sauce','meat & sauce','taste','flavor'],
      skin:      ['skin','crackling'],
      moisture:  ['moisture','juiciness'],
      appearance:['appearance','visual','presentation'],
      tenderness:['tenderness','texture']
    };
    const pickInt = (scores, names)=>{
      if (!scores || typeof scores!=='object') return 0;
      for (const name of names){
        if (scores[name] != null) return toInt(scores[name]);
        const want = name.toLowerCase().replace(/[ _&]/g,'');
        for (const k in scores){
          if (k && k.toLowerCase().replace(/[ _&]/g,'') === want) return toInt(scores[k]);
        }
      }
      return 0;
    };

    function buildOnsiteTotals(rows){
      const byTeam = new Map();
      for (const r of rows){
        const team = teamOf(r); if (!team) continue;
        const s = r.scores || {};
        const meatSauce = pickInt(s, ALIAS.meatSauce);
        const skin      = pickInt(s, ALIAS.skin);
        const moisture  = pickInt(s, ALIAS.moisture);
        const appearance= pickInt(s, ALIAS.appearance);
        const tenderness= pickInt(s, ALIAS.tenderness);

        const add = meatSauce + skin + moisture + appearance + tenderness; // **SUM ONLY**
        const agg = byTeam.get(team) || { team, total:0, cat:{meatSauce:0,skin:0,moisture:0,appearance:0,tenderness:0} };
        agg.total += add;
        agg.cat.meatSauce += meatSauce;
        agg.cat.skin      += skin;
        agg.cat.moisture  += moisture;
        agg.cat.appearance+= appearance;
        agg.cat.tenderness+= tenderness;
        byTeam.set(team, agg);
      }
      // Tie-breaker: Meat & Sauce → Skin → Moisture
      const ORDER = ['meatSauce','skin','moisture'];
      const sorted = [...byTeam.values()].sort((a,b)=>{
        if (b.total !== a.total) return b.total - a.total;
        for (const k of ORDER){ const d=(b.cat[k]||0)-(a.cat[k]||0); if (d) return d; }
        return 0;
      }).map((row,i,arr)=>{
        let tie = '';
        if (i>0 && row.total===arr[i-1].total){
          for (const k of ORDER){ if ((row.cat[k]||0)!==(arr[i-1].cat[k]||0)) { tie = k; break; } }
        }
        return { team: row.team, total: row.total, tie };
      });
      return sorted;
    }

    function buildSimpleSum(rows){       // Blind & Sauce
      const byTeam = new Map();
      for (const r of rows){
        const team = teamOf(r); if (!team) continue;
        const add = (r.score != null) ? toInt(r.score)
                  : (r.scores && typeof r.scores==='object')
                    ? Object.values(r.scores).reduce((s,v)=> s + toInt(v), 0)
                    : 0;
        const agg = byTeam.get(team) || { team, total:0 };
        agg.total += add;                 // **SUM ONLY**
        byTeam.set(team, agg);
      }
      return [...byTeam.values()].sort((a,b)=> b.total - a.total);
    }

    function rowHTML_Onsite({team,total,tie}){
      const tlabel = tie==='meatSauce' ? 'Meat & Sauce' : tie==='skin' ? 'Skin' : tie==='moisture' ? 'Moisture' : '';
      const badge  = tlabel ? `<span class="badge" title="Tie broken on ${tlabel}">tie: ${tlabel}</span>` : '';
      return `
        <div class="row">
          <div>
            <div><strong>${team}</strong> ${badge}</div>
            <div class="muted">on-site total (sum)</div>
          </div>
          <div class="score">${total}</div>
          <div></div> <!-- On-site: chip column intentionally blank -->
        </div>`;
    }

    function rowHTML_WithChip(team,total,subtitle,chipMap){
      const chip = chipMap[team] ?? '';
      const btnId = 'chipbtn_' + team.replace(/\s+/g,'_');
      const spanId = 'chipspan_' + team.replace(/\s+/g,'_');
      return `
        <div class="row">
          <div>
            <div><strong>${team}</strong> <span id="${spanId}" class="chip" style="display:none">Chip: ${chip || 'N/A'}</span></div>
            <div class="muted">${subtitle}</div>
          </div>
          <div class="score">${total}</div>
          <div><button type="button" class="btn" id="${btnId}">Show chip</button></div>
        </div>`;
    }

    function wireChipToggles(container){
      container.querySelectorAll('button.btn[id^="chipbtn_"]').forEach(btn=>{
        btn.addEventListener('click', ()=>{
          const key = btn.id.replace(/^chipbtn_/, '');
          const span = container.querySelector('#chipspan_' + key);
          if (!span) return;
          const show = span.style.display === 'none';
          span.style.display = show ? 'inline' : 'none';
          btn.textContent = show ? 'Hide chip' : 'Show chip';
        });
      });
    }

    function renderAll(){
      const onsiteRows = readFirstArray(KEYS.onsite);
      const blindRows  = readFirstArray(KEYS.blind);
      const sauceRows  = readFirstArray(KEYS.sauce);
      const chipMap    = readFirstMap(KEYS.chips);

      // On-site (sum + correct tie-break; NO chip toggle)
      const hostO = $('#onsite-list');
      if (hostO){
        const items = buildOnsiteTotals(onsiteRows);
        hostO.innerHTML = items.length ? items.map(rowHTML_Onsite).join('')
                                       : '<div class="muted">No on-site scores yet.</div>';
      }

      // Blind (sum; WITH chip toggle)
      const hostB = $('#blind-list');
      if (hostB){
        const items = buildSimpleSum(blindRows);
        hostB.innerHTML = items.length ? items.map(({team,total})=>rowHTML_WithChip(team,total,'blind total (sum)',chipMap)).join('')
                                       : '<div class="muted">No blind tasting scores yet.</div>';
        wireChipToggles(hostB);
      }

      // Sauce (sum; WITH chip toggle)
      const hostS = $('#sauce-list');
      if (hostS){
        const items = buildSimpleSum(sauceRows);
        hostS.innerHTML = items.length ? items.map(({team,total})=>rowHTML_WithChip(team,total,'sauce total (sum)',chipMap)).join('')
                                       : '<div class="muted">No sauce tasting scores yet.</div>';
        wireChipToggles(hostS);
      }
    }

    document.addEventListener('DOMContentLoaded', renderAll);
    if (document.readyState !== 'loading') renderAll();
    window.addEventListener('storage', (e)=>{ if (e && ['onsiteScores','blindScores','sauceScores','blindEntries'].includes(e.key)) renderAll(); });
    document.addEventListener('visibilitychange', ()=>{ if (!document.hidden) renderAll(); });
  })();
  </script>
</body>
</html>



