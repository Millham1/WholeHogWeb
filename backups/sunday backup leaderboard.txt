<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8"/>
  <meta name="viewport" content="width=device-width,initial-scale=1"/>
  <title>Whole Hog Competition 2025 — Leaderboard</title>
  <link rel="stylesheet" href="styles.css"/>

  <!-- Hard header styles copied to match landing -->
  <style>
    :root { --wh-header-h: 2.25in; --line:#dcdcdc; }
    body { font-family: system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; margin:0; background:#fafafa; }
    header { height:var(--wh-header-h); min-height:var(--wh-header-h); position:relative; display:flex; align-items:center; justify-content:center; background:white; }
    header h1 { margin:0; line-height:1.1; text-align:center; }
    header img:first-of-type { position:absolute; left:14px; top:50%; transform:translateY(-50%); height:calc(100% - 20px); width:auto; }
    header img:last-of-type  { position:absolute; right:14px; top:50%; transform:translateY(-50%); height:calc(100% - 20px); width:auto; }

    /* Top nav like landing */
    #wholehog-nav { width:100%; margin:12px auto; display:flex; justify-content:center; align-items:center; gap:12px; flex-wrap:wrap; text-align:center; }
    #wholehog-nav a { display:inline-block; white-space:nowrap; padding:8px 12px; border:1px solid #111; border-radius:10px; text-decoration:none; color:#111; background:#f5f5f5; }

    .container { max-width:1100px; margin:18px auto; padding:0 14px; }
    .card { border:1px solid var(--line); border-radius:12px; padding:14px; background:#fff; }
    .card h2 { margin:0 0 10px 0; }
    .muted { color:#666; font-size:12px; }
    .list { display:flex; flex-direction:column; gap:8px; margin-top:8px; }
    .row { display:grid; grid-template-columns: 1fr auto auto; gap:10px; align-items:center; border:1px solid #eee; border-radius:10px; padding:8px 10px; background:#fff; }
    .score { font-weight:800; }
    .badge { display:inline-block; font-size:12px; border:1px solid #bbb; border-radius:999px; padding:2px 8px; background:#f8f8f8; }
    .btn { padding:8px 12px; border-radius:10px; border:1px solid #111; background:#f5f5f5; cursor:pointer; }
    .chip { display:none; font-size:12px; color:#333; }
    .chip.show { display:inline; }
  </style>
</head>
<body>
  <header class="header">
    <img src="Legion whole hog logo.png" alt="Logo" onerror="this.style.display='none'"/>
    <h1>Whole Hog Competition 2025</h1>
    <img src="AL Medallion.png" alt="Logo" onerror="this.style.display='none'"/>
  </header>

  <nav id="wholehog-nav"><a href="./landing.html">Go to Landing</a>
    <a href="./onsite.html">Go to On-Site</a>
    <a href="./blind.html">Go to Blind Taste</a>
  <a href="./sauce.html">Go to Sauce Tasting</a>
</nav>

  <main class="container">
    <!-- Onsite Leaders at the top, card format -->
    <section class="card" id="onsite-card">
      <h2>onsite leaders</h2>
      <div class="muted">Total of all judges’ on-site scores per team. Ties resolved by category as shown.</div>
      <div id="onsite-list" class="list"></div>
    </section>

    <!-- Blind Tasting card -->
    <section class="card" id="blind-card" style="margin-top:18px;">
      <h2>Blind Tasting</h2>
      <div class="muted">Combined score of all judges for blind tasting per team.</div>
      <div id="blind-list" class="list"></div>
    </section>
      <section class="card" id="sauce-card" style="margin-top:18px;">
      <h2>Sauce Tasting</h2>
      <div class="muted">Combined sauce score across all judges per team.</div>
      <div id="sauce-list" class="list"></div>
    </section>
</main>

  <script>
  (function(){
    // Keys (must match landing/onsite)
    const K = {
      chipMap: 'wh_chipByTeam',
      onsite: 'onsiteScores',
      blindA: 'blindEntries',
      blindB: 'blindScores'
    };

    // Tie-break order: if totals tie, compare these (desc). Adjust if your rules differ.
    // We'll try flavor > tenderness > appearance > overall (common in BBQ comps), change as needed:
    const TIE_BREAK_ORDER = ['flavor','tenderness','appearance','overall'];

    // Helpers
    function getList(k){ try { return JSON.parse(localStorage.getItem(k)||'[]'); } catch { return []; } }
    function getJSON(k, fb){ try { const v = localStorage.getItem(k); return v ? JSON.parse(v) : fb; } catch { return fb; } }
    function sumNumbers(obj){
      let s = 0;
      if (!obj || typeof obj !== 'object') return 0;
      for (const [k,v] of Object.entries(obj)){
        const n = Number(v);
        if (Number.isFinite(n)) s += n;
      }
      return s;
    }
    function normName(v){ return (v||'').toString().trim(); }
    function chipForTeam(team){
      const name = normName(team);
      if (!name) return '';
      const map = getJSON(K.chipMap, null);
      if (map && typeof map === 'object' && map[name]) return String(map[name]);

      // Fallbacks: look through blind/onsite data
      for (const key of [K.blindB, K.blindA, K.onsite]){
        const arr = getList(key);
        for (const r of arr){
          const tn = normName(r.team || r.teamName);
          if (tn === name){
            if (r.chip) return String(r.chip);
            if (r.chip_number) return String(r.chip_number);
          }
        }
      }
      return '';
    }

    // ---- ONSITE: group by team, sum all judges, tie-break
    function buildOnsiteLeaders(){
      const raw = getList(K.onsite);
      const byTeam = new Map();

      for (const r of raw){
        const team = normName(r.team);
        if (!team) continue;
        const s = r.scores || {};
        const entryTotal = sumNumbers(s);
        const agg = byTeam.get(team) || { team, total:0, tieKeys: {appearance:0,tenderness:0,flavor:0,overall:0}, cnt:0 };
        agg.total += entryTotal;
        // accumulate each category to support tie-break across *aggregate*
        for (const k of ['appearance','tenderness','flavor','overall']){
          const n = Number(s[k]); if (Number.isFinite(n)) agg.tieKeys[k] += n;
        }
        agg.cnt += 1;
        byTeam.set(team, agg);
      }

      let rows = Array.from(byTeam.values());

      // Sort with tie-breaks; track which key broke the tie
      rows.sort((a,b) => {
        if (b.total !== a.total) return b.total - a.total;
        for (const k of TIE_BREAK_ORDER){
          const d = (b.tieKeys[k]||0) - (a.tieKeys[k]||0);
          if (d !== 0) return d;
        }
        return 0;
      });

      // Compute tie info by comparing neighbors with same total
      const items = rows.map((row, idx, arr) => {
        let tie = false, cat = '';
        if (idx>0 && row.total === arr[idx-1].total){
          // same total as previous; find first category that differs
          for (const k of TIE_BREAK_ORDER){
            const prev = arr[idx-1].tieKeys[k]||0;
            const cur  = row.tieKeys[k]||0;
            if (cur !== prev){ tie = true; cat = k; break; }
          }
          if (!cat) { tie = true; cat = 'unresolved'; }
        }
        return {...row, tieBreakUsed: tie ? cat : ''};
      });

      return items;
    }

    function renderOnsite(){
      const host = document.getElementById('onsite-list');
      if (!host) return;
      const items = buildOnsiteLeaders();
      if (!items.length){ host.innerHTML = '<div class="muted">No on-site scores yet.</div>'; return; }

      host.innerHTML = items.map(({team,total,tieBreakUsed}) => {
        const chip = chipForTeam(team);
        const tieBadge = tieBreakUsed ? `<span class="badge" title="Tie broken on ${tieBreakUsed}">tie: ${tieBreakUsed}</span>` : '';
        const chipId = 'chip-' + btoa(unescape(encodeURIComponent(team))).replace(/=+$/,'');
        return `
          <div class="row">
            <div>
              <div><strong>${team}</strong> ${tieBadge}</div>
              <div class="muted">on-site total</div>
            </div>
            <div class="score">${total}</div>
            <div>
              <button class="btn" type="button" data-chip-target="${chipId}">Show chip</button>
              <span id="${chipId}" class="chip">${chip ? ('Chip: '+chip) : 'Chip: (none)'}</span>
            </div>
          </div>`;
      }).join('');

      // Wire chip reveal buttons
      host.querySelectorAll('button[data-chip-target]').forEach(btn=>{
        btn.addEventListener('click', ()=>{
          const id = btn.getAttribute('data-chip-target');
          const span = document.getElementById(id);
          if (!span) return;
          const showing = span.classList.toggle('show');
          btn.textContent = showing ? 'Hide chip' : 'Show chip';
        });
      });
    }

    // ---- BLIND: group by team, sum all judges
    function buildBlindLeaders(){
      const arrs = [getList(K.blindB), getList(K.blindA)];
      const byTeam = new Map();

      for (const raw of arrs){
        for (const r of raw){
          const team = normName(r.team || r.teamName);
          if (!team) continue;

          // Determine score: if a single numeric 'score', use it; else sum numeric fields in 'scores' or in record
          let val = 0;
          if (Number.isFinite(Number(r.score))) {
            val = Number(r.score);
          } else if (r.scores && typeof r.scores === 'object'){
            val = sumNumbers(r.scores);
          } else {
            // sum any numeric fields on the record as a fallback
            const copy = {...r}; delete copy.team; delete copy.teamName; delete copy.judge; delete copy.chip; delete copy.chip_number; delete copy.ts;
            val = sumNumbers(copy);
          }

          const agg = byTeam.get(team) || { team, total:0, cnt:0 };
          agg.total += val;
          agg.cnt += 1;
          byTeam.set(team, agg);
        }
      }

      return Array.from(byTeam.values()).sort((a,b)=> b.total - a.total);
    }

    function renderBlind(){
      const host = document.getElementById('blind-list');
      if (!host) return;
      const items = buildBlindLeaders();
      if (!items.length){ host.innerHTML = '<div class="muted">No blind tasting scores yet.</div>'; return; }

      host.innerHTML = items.map(({team,total})=>{
        const chip = chipForTeam(team);
        const chipId = 'chip-' + btoa(unescape(encodeURIComponent('blind:'+team))).replace(/=+$/,'');
        return `
          <div class="row">
            <div>
              <div><strong>${team}</strong></div>
              <div class="muted">blind total</div>
            </div>
            <div class="score">${total}</div>
            <div>
              <button class="btn" type="button" data-chip-target="${chipId}">Show chip</button>
              <span id="${chipId}" class="chip">${chip ? ('Chip: '+chip) : 'Chip: (none)'}</span>
            </div>
          </div>`;
      }).join('');

      // Wire chip reveal buttons
      host.querySelectorAll('button[data-chip-target]').forEach(btn=>{
        btn.addEventListener('click', ()=>{
          const id = btn.getAttribute('data-chip-target');
          const span = document.getElementById(id);
          if (!span) return;
          const showing = span.classList.toggle('show');
          btn.textContent = showing ? 'Hide chip' : 'Show chip';
        });
      });
    }

    // Init & keep fresh if another tab updates data
    function renderAll(){ renderOnsite(); renderBlind(); }
    document.addEventListener('DOMContentLoaded', renderAll);
    window.addEventListener('storage', (e)=> {
      if (!e || !e.key) return;
      if (['wh_chipByTeam','onsiteScores','blindEntries','blindScores'].includes(e.key)) renderAll();
    });
    document.addEventListener('visibilitychange', ()=> { if (!document.hidden) renderAll(); });
  })();
  </script>
<style id="leaderboard-nav-override">
  /* Wrap keeps nav centered and narrower so the buttons sit nearer the page center */
  #wholehog-nav {
    max-width: 820px;          /* pull buttons closer together */
    margin: 12px auto;         /* center the whole row */
    display: flex;
    justify-content: center;   /* center row */
    align-items: center;
    gap: 12px;                 /* even spacing */
    flex-wrap: wrap;
    text-align: center;
  }

  /* Make all "Go to ..." anchors match the On-site page style */
  #wholehog-nav a {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    white-space: nowrap;
    padding: 10px 14px;
    border-radius: 10px;

    /* red buttons w/ bold black text (same as other pages) */
    background: #e53935 !important;
    color: #000 !important;
    font-weight: 800 !important;
    border: 2px solid #000 !important;

    text-decoration: none;
    min-width: 180px;          /* ensures even visual width */
  }

  /* Slight hover feedback */
  #wholehog-nav a:hover {
    filter: brightness(0.92);
  }
</style>

<script id="wh-sauce-leaders-script">
(function(){
  const K = { chipMap:'wh_chipByTeam', sauce:'sauceScores' };

  function getList(k){ try { return JSON.parse(localStorage.getItem(k)||"[]"); } catch { return []; } }
  function getJSON(k,fb){ try { const v = localStorage.getItem(k); return v?JSON.parse(v):fb; } catch { return fb; } }
  function norm(v){ return (v||"").toString().trim(); }
  function sumNumbers(obj){
    let s=0; if(!obj||typeof obj!=='object') return 0;
    for (const [k,v] of Object.entries(obj)){ const n=Number(v); if (Number.isFinite(n)) s+=n; }
    return s;
  }
  function chipFor(team){
    const name = norm(team); if (!name) return "";
    const map = getJSON(K.chipMap, null);
    if (map && typeof map==="object" && map[name]) return String(map[name]);
    const arr = getList(K.sauce);
    for (const r of arr){
      const tn = norm(r.team||r.teamName);
      if (tn===name){
        if (r.chip) return String(r.chip);
        if (r.chip_number) return String(r.chip_number);
      }
    }
    return "";
  }

  function buildSauce(){
    const raw = getList(K.sauce); // expected: {team, judge, score, ts}
    const byTeam = new Map();
    for (const r of raw){
      const team = norm(r.team||r.teamName);
      if (!team) continue;
      const val = Number(r.score);
      const add = Number.isFinite(val) ? val : (r.scores ? sumNumbers(r.scores) : 0);
      const agg = byTeam.get(team) || { team, total:0, cnt:0 };
      agg.total += add; agg.cnt += 1;
      byTeam.set(team, agg);
    }
    return Array.from(byTeam.values()).sort((a,b)=> b.total - a.total);
  }

  function renderSauce(){
    const host = document.getElementById('sauce-list');
    if (!host) return;
    const items = buildSauce();
    if (!items.length){ host.innerHTML = '<div class="muted">No sauce tasting scores yet.</div>'; return; }

    host.innerHTML = items.map(({team,total})=>{
      const chip = chipFor(team);
      const chipId = 'chip-' + btoa(unescape(encodeURIComponent('sauce:'+team))).replace(/=+$/,'');
      return `
        <div class="row">
          <div>
            <div><strong>${team}</strong></div>
            <div class="muted">sauce total</div>
          </div>
          <div class="score">${total}</div>
          <div>
            <button class="btn" type="button" data-chip-target="${chipId}">Show chip</button>
            <span id="${chipId}" class="chip">${chip ? ('Chip: '+chip) : 'Chip: (none)'}</span>
          </div>
        </div>`;
    }).join('');

    host.querySelectorAll('button[data-chip-target]').forEach(btn=>{
      btn.addEventListener('click', ()=>{
        const id = btn.getAttribute('data-chip-target');
        const span = document.getElementById(id);
        if (!span) return;
        const on = span.classList.toggle('show');
        btn.textContent = on ? 'Hide chip' : 'Show chip';
      });
    });
  }

  function renderAll(){ renderSauce(); }
  document.addEventListener('DOMContentLoaded', renderAll);
  window.addEventListener('storage', (e)=>{ if (e && e.key==='sauceScores') renderAll(); });
  document.addEventListener('visibilitychange', ()=>{ if (!document.hidden) renderAll(); });
})();
</script>
<script>
/* --- LEADERBOARD PATCH: sums only; remove chip on On-site --- */
(function(){
  const $ = s => document.querySelector(s);
  const K = { onsite:'onsiteScores', blind:'blindScores', sauce:'sauceScores' };

  const sumNumbers = (o)=> {
    let s=0; if(!o||typeof o!=='object') return 0;
    for (const v of Object.values(o)) { const n=Number(v); if (Number.isFinite(n)) s+=n; }
    return s;
  };

  function buildOnsiteTotals(){
    const raw = JSON.parse(localStorage.getItem(K.onsite)||'[]');
    const byTeam = new Map();
    for (const r of raw){
      const team = (r.team||'').trim(); if (!team) continue;
      const total = sumNumbers(r.scores||{});
      const a = byTeam.get(team) || { team, total:0, breakdown:{appearance:0,tenderness:0,flavor:0,overall:0} };
      a.total += total;
      const s = r.scores||{};
      a.breakdown.appearance += Number(s.appearance)||0;
      a.breakdown.tenderness += Number(s.tenderness)||0;
      a.breakdown.flavor    += Number(s.flavor)||0;
      a.breakdown.overall   += Number(s.overall)||0;
      byTeam.set(team,a);
    }
    const TIE = ['flavor','tenderness','appearance','overall'];
    return [...byTeam.values()].sort((x,y)=>{
      if (y.total!==x.total) return y.total-x.total;
      for (const k of TIE){ const d=(y.breakdown[k]||0)-(x.breakdown[k]||0); if (d) return d; }
      return 0;
    }).map((row, idx, arr) => {
      // mark tie-break only internally so we can show a small tag
      let tieBreak=''; if (idx>0 && row.total===arr[idx-1].total){
        for (const k of TIE){ if (row.breakdown[k]!==arr[idx-1].breakdown[k]) { tieBreak=k; break; } }
      }
      return {...row, tieBreak};
    });
  }

  function renderOnsite(){
    const host = $('#onsite-list'); if (!host) return;
    const items = buildOnsiteTotals();
    if (!items.length){ host.innerHTML='<div class="muted">No on-site scores yet.</div>'; return; }
    host.innerHTML = items.map(({team,total,tieBreak})=>{
      const tie = tieBreak ? `<span class="badge" title="Tie broken on ${tieBreak}">tie: ${tieBreak}</span>` : '';
      return `
        <div class="row">
          <div>
            <div><strong>${team}</strong> ${tie}</div>
            <div class="muted">on-site total</div>
          </div>
          <div class="score">${total}</div>
          <div><!-- chip removed on purpose --></div>
        </div>`;
    }).join('');
  }

  function buildSumList(key){
    const raw = JSON.parse(localStorage.getItem(key)||'[]');
    const byTeam = new Map();
    for (const r of raw){
      const team = (r.team||r.teamName||'').trim(); if (!team) continue;
      let add = 0;
      if (Number.isFinite(Number(r.score))) add = Number(r.score);
      else if (r.scores && typeof r.scores==='object') add = sumNumbers(r.scores);
      const a = byTeam.get(team) || { team, total:0 };
      a.total += add; byTeam.set(team,a);
    }
    return [...byTeam.values()].sort((a,b)=>b.total-a.total);
  }

  function renderBlind(){
    const host = document.getElementById('blind-list'); if (!host) return;
    const items = buildSumList(K.blind);
    if (!items.length){ host.innerHTML='<div class="muted">No blind tasting scores yet.</div>'; return; }
    host.innerHTML = items.map(({team,total})=>`
      <div class="row">
        <div>
          <div><strong>${team}</strong></div>
          <div class="muted">blind total (sum)</div>
        </div>
        <div class="score">${total}</div>
        <div></div>
      </div>`).join('');
  }

  function renderSauce(){
    const host = document.getElementById('sauce-list'); if (!host) return;
    const items = buildSumList(K.sauce);
    if (!items.length){ host.innerHTML='<div class="muted">No sauce tasting scores yet.</div>'; return; }
    host.innerHTML = items.map(({team,total})=>`
      <div class="row">
        <div>
          <div><strong>${team}</strong></div>
          <div class="muted">sauce total (sum)</div>
        </div>
        <div class="score">${total}</div>
        <div></div>
      </div>`).join('');
  }

  // Re-render now and on focus/storage changes
  function renderAll(){ renderOnsite(); renderBlind(); renderSauce(); }
  document.addEventListener('DOMContentLoaded', renderAll);
  if (document.readyState!=='loading') renderAll();
  window.addEventListener('storage', (e)=>{ if (e && ['onsiteScores','blindScores','sauceScores'].includes(e.key)) renderAll(); });
  document.addEventListener('visibilitychange', ()=>{ if (!document.hidden) renderAll(); });
})();
</script>
<script id="wh-force-sum-leaders">
(function(){
  const $ = s => document.querySelector(s);
  const K = { onsite:'onsiteScores', blind:'blindScores', sauce:'sauceScores' };

  const sumNumbers = (obj) => {
    let s = 0;
    if (!obj || typeof obj !== 'object') return 0;
    for (const v of Object.values(obj)) { const n = Number(v); if (Number.isFinite(n)) s += n; }
    return s;
  };

  // --- ONSITE (sum all judges' category numbers per team; tie-break only, no chip UI) ---
  function buildOnsiteTotals(){
    const raw = JSON.parse(localStorage.getItem(K.onsite)||'[]');
    const byTeam = new Map();
    for (const r of raw){
      const team = (r.team||'').trim(); if (!team) continue;
      const s = r.scores || {};
      const add = (Number(s.appearance)||0) + (Number(s.tenderness)||0) + (Number(s.flavor)||0) + (Number(s.overall)||0);
      const agg = byTeam.get(team) || { team, total:0, tieKeys:{appearance:0,tenderness:0,flavor:0,overall:0} };
      agg.total += add;
      agg.tieKeys.appearance += Number(s.appearance)||0;
      agg.tieKeys.tenderness += Number(s.tenderness)||0;
      agg.tieKeys.flavor    += Number(s.flavor)||0;
      agg.tieKeys.overall   += Number(s.overall)||0;
      byTeam.set(team, agg);
    }
    const ORDER = ['flavor','tenderness','appearance','overall'];
    const rows = [...byTeam.values()].sort((a,b)=>{
      if (b.total !== a.total) return b.total - a.total;
      for (const k of ORDER){ const d=(b.tieKeys[k]||0)-(a.tieKeys[k]||0); if (d) return d; }
      return 0;
    });
    return rows.map((row,i,arr)=>{
      let tie=''; if (i>0 && row.total===arr[i-1].total){
        for (const k of ORDER){
          if ((row.tieKeys[k]||0) !== (arr[i-1].tieKeys[k]||0)) { tie = k; break; }
        }
      }
      return {...row, tie};
    });
  }

  function renderOnsite(){
    const host = $('#onsite-list'); if (!host) return;
    const items = buildOnsiteTotals();
    if (!items.length){ host.innerHTML = '<div class="muted">No on-site scores yet.</div>'; return; }
    host.innerHTML = items.map(({team,total,tie})=>{
      const tieBadge = tie ? `<span class="badge" title="Tie broken on ${tie}">tie: ${tie}</span>` : '';
      return `
        <div class="row">
          <div>
            <div><strong>${team}</strong> ${tieBadge}</div>
            <div class="muted">on-site total (sum)</div>
          </div>
          <div class="score">${total}</div>
          <div></div>
        </div>`;
    }).join('');
  }

  // --- BLIND & SAUCE (sum all judge rows per team) ---
  function buildSimpleSum(key){
    const raw = JSON.parse(localStorage.getItem(key)||'[]');
    const byTeam = new Map();
    for (const r of raw){
      const team = (r.team || r.teamName || '').trim(); if (!team) continue;
      let add = 0;
      if (Number.isFinite(Number(r.score))) add = Number(r.score);
      else if (r.scores && typeof r.scores==='object') add = sumNumbers(r.scores); // fallback if structure differs
      const agg = byTeam.get(team) || { team, total:0 };
      agg.total += add;
      byTeam.set(team, agg);
    }
    return [...byTeam.values()].sort((a,b)=> b.total - a.total);
  }

  function renderBlind(){
    const host = document.getElementById('blind-list'); if (!host) return;
    const items = buildSimpleSum(K.blind);
    host.innerHTML = items.length ? items.map(({team,total})=>`
      <div class="row">
        <div>
          <div><strong>${team}</strong></div>
          <div class="muted">blind total (sum)</div>
        </div>
        <div class="score">${total}</div>
        <div></div>
      </div>`).join('') : '<div class="muted">No blind tasting scores yet.</div>';
  }

  function renderSauce(){
    const host = document.getElementById('sauce-list'); if (!host) return;
    const items = buildSimpleSum(K.sauce);
    host.innerHTML = items.length ? items.map(({team,total})=>`
      <div class="row">
        <div>
          <div><strong>${team}</strong></div>
          <div class="muted">sauce total (sum)</div>
        </div>
        <div class="score">${total}</div>
        <div></div>
      </div>`).join('') : '<div class="muted">No sauce tasting scores yet.</div>';
  }

  function renderAll(){ renderOnsite(); renderBlind(); renderSauce(); }
  document.addEventListener('DOMContentLoaded', renderAll);
  if (document.readyState !== 'loading') renderAll();
  window.addEventListener('storage', (e)=>{ if (e && [K.onsite,K.blind,K.sauce].includes(e.key)) renderAll(); });
  document.addEventListener('visibilitychange', ()=>{ if (!document.hidden) renderAll(); });
})();
</script>
<script id="wh-sum-leaders-clean">
(function(){
  const $ = s => document.querySelector(s);
  const K = { onsite:'onsiteScores', blind:'blindScores', sauce:'sauceScores' };

  function sumNumbers(obj){
    let s = 0;
    if (!obj || typeof obj !== 'object') return 0;
    for (const v of Object.values(obj)) {
      const n = Number(v);
      if (Number.isFinite(n)) s += n;
    }
    return s;
  }

  // ---------- ONSITE (sum all judges' category points) ----------
  function buildOnsiteTotals(){
    const raw = JSON.parse(localStorage.getItem(K.onsite) || '[]');
    const byTeam = new Map();
    for (const r of raw){
      const team = (r.team || '').trim(); if (!team) continue;
      const s = r.scores || {};
      const add = (Number(s.appearance)||0) + (Number(s.tenderness)||0) + (Number(s.flavor)||0) + (Number(s.overall)||0);
      const agg = byTeam.get(team) || { team, total:0, cat:{appearance:0,tenderness:0,flavor:0,overall:0} };
      agg.total += add;
      agg.cat.appearance += Number(s.appearance)||0;
      agg.cat.tenderness += Number(s.tenderness)||0;
      agg.cat.flavor    += Number(s.flavor)||0;
      agg.cat.overall   += Number(s.overall)||0;
      byTeam.set(team, agg);
    }
    const ORDER = ['flavor','tenderness','appearance','overall']; // tie-break order
    const rows = Array.from(byTeam.values()).sort((a,b)=>{
      if (b.total !== a.total) return b.total - a.total;
      for (const k of ORDER){ const d=(b.cat[k]||0) - (a.cat[k]||0); if (d) return d; }
      return 0;
    }).map((row,i,arr)=>{
      let tie = '';
      if (i>0 && row.total === arr[i-1].total){
        for (const k of ORDER){
          if ((row.cat[k]||0) !== (arr[i-1].cat[k]||0)) { tie = k; break; }
        }
      }
      return { team: row.team, total: row.total, tie };
    });
    return rows;
  }

  function renderOnsite(){
    const host = $('#onsite-list'); if (!host) return;
    const items = buildOnsiteTotals();
    if (!items.length){ host.innerHTML = '<div class="muted">No on-site scores yet.</div>'; return; }
    host.innerHTML = items.map(({team,total,tie})=>{
      const tieBadge = tie ? `<span class="badge" title="Tie broken on ${tie}">tie: ${tie}</span>` : '';
      return `
        <div class="row">
          <div>
            <div><strong>${team}</strong> ${tieBadge}</div>
            <div class="muted">on-site total (sum)</div>
          </div>
          <div class="score">${total}</div>
          <div></div>
        </div>`;
    }).join('');
  }

  // ---------- BLIND & SAUCE (sum judge rows per team; no averaging) ----------
  function buildSimpleSum(key){
    const raw = JSON.parse(localStorage.getItem(key) || '[]');
    const byTeam = new Map();
    for (const r of raw){
      const team = (r.team || r.teamName || '').trim(); if (!team) continue;
      let add = 0;
      if (Number.isFinite(Number(r.score))) add = Number(r.score);
      else if (r.scores && typeof r.scores === 'object') add = sumNumbers(r.scores);
      const agg = byTeam.get(team) || { team, total:0 };
      agg.total += add; byTeam.set(team, agg);
    }
    return Array.from(byTeam.values()).sort((a,b)=> b.total - a.total);
  }

  function renderBlind(){
    const host = document.getElementById('blind-list'); if (!host) return;
    const items = buildSimpleSum(K.blind);
    host.innerHTML = items.length ? items.map(({team,total})=>`
      <div class="row">
        <div>
          <div><strong>${team}</strong></div>
          <div class="muted">blind total (sum)</div>
        </div>
        <div class="score">${total}</div>
        <div></div>
      </div>`).join('') : '<div class="muted">No blind tasting scores yet.</div>';
  }

  function renderSauce(){
    const host = document.getElementById('sauce-list'); if (!host) return;
    const items = buildSimpleSum(K.sauce);
    host.innerHTML = items.length ? items.map(({team,total})=>`
      <div class="row">
        <div>
          <div><strong>${team}</strong></div>
          <div class="muted">sauce total (sum)</div>
        </div>
        <div class="score">${total}</div>
        <div></div>
      </div>`).join('') : '<div class="muted">No sauce tasting scores yet.</div>';
  }

  function renderAll(){ renderOnsite(); renderBlind(); renderSauce(); }
  document.addEventListener('DOMContentLoaded', renderAll);
  if (document.readyState !== 'loading') renderAll();
  window.addEventListener('storage', (e)=>{ if (e && ['onsiteScores','blindScores','sauceScores'].includes(e.key)) renderAll(); });
  document.addEventListener('visibilitychange', ()=>{ if (!document.hidden) renderAll(); });
})();
</script>



</body>
</html>
