<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8"/>
  <meta name="viewport" content="width=device-width,initial-scale=1"/>
  <title>Whole Hog Competition 2025</title>
  <link rel="stylesheet" href="styles.css"/>

  <!-- WH HARD HEADER START -->
  <style id="wh-hard-header">
  :root { --wh-header-h: 2.25in; }
  header, .header, .app-header, .site-header, #header {
    min-height: var(--wh-header-h) !important;
    height: var(--wh-header-h) !important;
    position: relative !important;
    display: flex !important;
    align-items: center !important;
    justify-content: center !important;
  }
  header h1, .header h1, .app-header h1, .site-header h1, #header h1 {
    margin: 0 !important;
    line-height: 1.1 !important;
  }
  /* Left logo (common IDs/classes or first image) */
  header img#logoLeft,
  header .left-img,
  header .brand-left img,
  #header img#logoLeft,
  #header .left-img,
  #header .brand-left img,
  header img:first-of-type {
    position: absolute !important;
    left: 14px !important;
    top: 50% !important;
    transform: translateY(-50%) !important;
    height: calc(100% - 20px) !important;  /* fit inside header */
    width: auto !important;
  }
  /* Right logo (common classes or last image) */
  header img.right-img,
  header .brand-right img,
  #header img.right-img,
  #header .brand-right img,
  header img:last-of-type {
    position: absolute !important;
    right: 14px !important;
    top: 50% !important;
    transform: translateY(-50%) !important;
    height: calc(100% - 20px) !important;
    width: auto !important;
  }
  </style>
  <!-- WH HARD HEADER END -->

  <style id="wh-nav-style">
    #wholehog-nav{
      width:100%; margin:12px auto;
      display:flex; justify-content:center; align-items:center;
      gap:12px; flex-wrap:wrap; text-align:center;
    }
    #wholehog-nav a{ display:inline-block; white-space:nowrap; width:auto; float:none!important; }
  </style>
</head>
<body>
  <header class="header" style="height:2.25in; min-height:2.25in; position:relative; display:flex; align-items:center; justify-content:center;">
    <img id="logoLeft" src="Legion whole hog logo.png" alt="Logo" />
    <h1 style="margin:0; text-align:center;">Whole Hog Competition 2025</h1>
    <img class="right-img" src="AL Medallion.png" alt="Logo" />
  </header>

  <div id="wholehog-nav">
    <a class="btn" href="./onsite.html">Go to On-Site</a>
    <a class="btn" href="./blind.html">Go to Blind Taste</a>
    <a class="btn" href="./leaderboard.html">Go to Leaderboard</a>
  </div>

  <div id="navRow" style="display:grid;grid-template-columns:1fr 1fr;gap:24px;max-width:640px;margin:18px auto 10px;align-items:center;justify-items:center;">
  </div>

  <!-- WHOLEHOG LANDING TEAMS UI START -->
  <section id="whTeamsCard" style="margin:18px auto;max-width:1000px;border:1px solid #ddd;border-radius:12px;padding:14px;background:#fff;">
    <h2 style="margin:0 0 12px 0;">Teams</h2>
    <div style="display:flex;gap:14px;align-items:flex-end;flex-wrap:wrap;">
      <div style="flex:1 1 280px;">
        <label for="whTeamName" style="display:block;font-weight:600;margin-bottom:4px;">Team Name</label>
        <span id="wh-flags-mini" style="display:inline-flex;flex-direction:column;gap:4px;margin-right:8px;">
          <label style="display:inline-flex;align-items:center;gap:6px;"><input type="checkbox" id="legionFlag"> <span>Legion</span></label>
          <label style="display:inline-flex;align-items:center;gap:6px;"><input type="checkbox" id="sonsFlag"> <span>Sons</span></label>
        </span>
        <input id="whTeamName" type="text" style="width:50%;padding:8px 10px;border:1px solid #bbb;border-radius:8px;" placeholder="e.g., Demo Team" />
      </div>
      <div style="flex:0 0 200px;">
        <label for="whSiteNumber" style="display:block;font-weight:600;margin-bottom:4px;">Site #</label>
        <span id="wh-chip-site-row" style="display:inline-flex;gap:12px;align-items:flex-end;">
          <span id="wh-chip-wrap" style="display:flex;flex-direction:column;min-width:120px;">
            <label>Chip # <input id="chip" type="text" class="input" placeholder="A12" style="max-width:120px"></label>
          </span>
          <span id="wh-site-wrap" style="display:flex;flex-direction:column;min-width:140px;">
            <label>Site # <input id="whSiteNumber" type="text" style="width:100%;padding:8px 10px;border:1px solid #bbb;border-radius:8px;" placeholder="e.g., 101" /></label>
          </span>
        </span>
      </div>
      <div style="flex:0 0 auto;">
        <button id="whBtnAddTeam" class="btn-red-black" style="background:#b10020;color:#111;border:2px solid #111;border-radius:10px;padding:10px 16px;font-weight:700;cursor:pointer;">Add Team</button>
      </div>
    </div>

    <div style="margin-top:14px;">
      <ul id="whTeamsList" style="list-style:none;padding:0;margin:0;"></ul>
      <!-- Table view will render here too -->
      <div id="whTeamsTableWrap" style="margin-top:10px; overflow:auto;"></div>
    </div>

    <p style="margin-top:10px;color:#666;font-size:12px;">Tip: Use Remove to delete a team added in error. (If the team already has scoring entries, removal will be blocked.)</p>
  </section>
  <!-- WHOLEHOG LANDING TEAMS UI END -->

  <div id="go-onsite-wrap" style="text-align:center;margin:16px 0 24px;"></div>

  <div class="container">
    <div class="card">
      <h2>Judges</h2>
      <div id="judgesList"></div>
      <form id="judgeForm" class="flex">
        <input id="judgeName" class="input" placeholder="Judge name"/>
        <button class="btn" type="submit">Add Judge</button>
      </form>
    </div>
  </div>

  <!-- Keep your existing local scripts -->
  <script src="landing.js"></script>
  <script src="landing-teams.js"></script>
  <script src="migrate-teams.js"></script>
  <!-- Removed: <script src="landing-sb.js"></script>  (no Supabase in local-only build) -->

  <!-- === Local-only data layer & UI wiring (surgical, no network) === -->
  <script>
  (function(){
    // Keys
    const K = {
      teams: 'wh_Teams',
      judges: 'wh_Judges',
      selTeam: 'selectedTeamName',
      selJudge: 'selectedJudgeName',
      chipMap: 'wh_chipByTeam',
      blindA: 'blindEntries',
      blindB: 'blindScores',
      onsite: 'onsiteScores'
    };

    // Helpers
    const $ = (s,r)=> (r||document).querySelector(s);
    const getList = (k)=>{ try { return JSON.parse(localStorage.getItem(k)||'[]'); } catch { return []; } };
    const setList = (k, v)=> localStorage.setItem(k, JSON.stringify(v));

    function addTeamLocal(nameRaw, isLegion, isSons, siteRaw){
      const name = String(nameRaw||'').trim();
      if (!name) throw new Error('Enter a team name.');
      const teams = getList(K.teams);
      const exists = teams.find(t => (t.name||'').toLowerCase() === name.toLowerCase());
      const affiliation = isLegion && isSons ? 'Legion & Sons' : (isLegion ? 'Legion' : (isSons ? 'Sons' : ''));
      const site = String(siteRaw||'').trim();

      if (exists){
        // update affiliation/site if changed
        exists.affiliation = affiliation;
        exists.site = site;
      } else {
        teams.push({ name, affiliation, site, ts: new Date().toISOString() });
      }
      setList(K.teams, teams);
      localStorage.setItem(K.selTeam, name);
      return name;
    }

    // Chip helpers
    function clearChipsForTeam(team){
      if (!team) return;
      // Map store
      let map = null;
      try { map = JSON.parse(localStorage.getItem(K.chipMap)||'null'); } catch {}
      if (map && typeof map === 'object' && map[team]) {
        delete map[team];
        localStorage.setItem(K.chipMap, JSON.stringify(map));
      }
      // Arrays
      [['blindA','team'],['blindB','team'],['onsite','team']].forEach(([key])=>{
        let arr = [];
        try { arr = JSON.parse(localStorage.getItem(K[key])||'[]'); } catch {}
        if (Array.isArray(arr) && arr.length){
          let changed = false;
          arr = arr.map(r => {
            const nm = r.team || r.teamName || '';
            if (nm === team){
              if ('chip' in r && r.chip) { r.chip=''; changed = true; }
              if ('chip_number' in r && r.chip_number) { r.chip_number=''; changed = true; }
            }
            return r;
          });
          if (changed) localStorage.setItem(K[key], JSON.stringify(arr));
        }
      });
    }

    function hasChip(team){
      if (!team) return false;
      try {
        const map = JSON.parse(localStorage.getItem(K.chipMap)||'null');
        if (map && map[team]) return true;
      } catch {}
      for (const key of [K.blindA, K.blindB, K.onsite]){
        let arr=[]; try{ arr=JSON.parse(localStorage.getItem(key)||'[]'); }catch{}
        if (Array.isArray(arr) && arr.some(r => ((r.team||r.teamName)||'')===team && String((r.chip||r.chip_number||'')).trim()!=='')){
          return true;
        }
      }
      return false;
    }

    // Renderers
    function renderTeamsTable(){
      const wrap = $('#whTeamsTableWrap');
      if (!wrap) return;
      const teams = getList(K.teams);
      if (!teams.length){ wrap.innerHTML = '<div class="muted">No teams yet.</div>'; return; }

      const anySite = teams.some(t => (t.site||'').trim() !== '');
      const head =
        `<tr>
          <th style="text-align:left;border-bottom:1px solid #ddd;padding:6px 4px;">Affiliation</th>
          <th style="text-align:left;border-bottom:1px solid #ddd;padding:6px 4px;">Team Name</th>
          ${anySite?'<th style="text-align:left;border-bottom:1px solid #ddd;padding:6px 4px;">Site #</th>':''}
          <th style="text-align:left;border-bottom:1px solid #ddd;padding:6px 4px;">Chip Entered</th>
        </tr>`;

      const rows = teams.map(t=>{
        const chip = hasChip(t.name) ? 'Yes' : 'No';
        return `<tr>
          <td style="padding:6px 4px;border-bottom:1px solid #eee;">${t.affiliation||''}</td>
          <td style="padding:6px 4px;border-bottom:1px solid #eee;">${t.name||''}</td>
          ${anySite?`<td style="padding:6px 4px;border-bottom:1px solid #eee;">${t.site||''}</td>`:''}
          <td style="padding:6px 4px;border-bottom:1px solid #eee;">${chip}</td>
        </tr>`;
      }).join('');

      wrap.innerHTML = `<table style="width:100%;border-collapse:collapse;"><thead>${head}</thead><tbody>${rows}</tbody></table>`;
    }

    function renderJudgesList(){
      const host = $('#judgesList');
      if (!host) return;
      const judges = getList(K.judges);
      if (!judges.length){ host.innerHTML = '<div class="muted">No judges yet.</div>'; return; }
      host.innerHTML = `<ul style="margin:8px 0 0; padding-left:16px;">${
        judges.map(j=>`<li>${j.name||''}</li>`).join('')
      }</ul>`;
    }

    // Wire UI
    document.addEventListener('DOMContentLoaded', function(){
      // Remove "Current Entries" card if still present
      const evCard = document.getElementById('entries-viewer');
      if (evCard && evCard.parentNode) evCard.parentNode.removeChild(evCard);
      const evStyle = Array.from(document.querySelectorAll('style')).find(s=>/\.entries-card/.test(s.textContent||''));
      if (evStyle && evStyle.parentNode) evStyle.parentNode.removeChild(evStyle);

      // Add Team
      const btn = document.getElementById('whBtnAddTeam');
      if (btn){
        btn.addEventListener('click', function(e){
          e.preventDefault();
          const name = $('#whTeamName')?.value || '';
          const site = $('#whSiteNumber')?.value || '';
          const isLegion = $('#legionFlag')?.checked || false;
          const isSons   = $('#sonsFlag')?.checked || false;
          const chipIn   = $('#chip');

          try {
            const savedName = addTeamLocal(name, isLegion, isSons, site);
            // Clear any existing chip for that team + clear the input field
            clearChipsForTeam(savedName);
            if (chipIn) chipIn.value = '';
            // Refresh
            renderTeamsTable();
            alert('Team saved locally: ' + savedName);
          } catch(err){
            alert(err && err.message ? err.message : 'Unable to add team');
          }
        });
      }

      // Judges add
      const jForm = document.getElementById('judgeForm');
      if (jForm){
        jForm.addEventListener('submit', function(e){
          e.preventDefault();
          const name = String($('#judgeName')?.value||'').trim();
          if (!name) { alert('Enter a judge name.'); return; }
          const judges = getList(K.judges);
          if (!judges.some(j => (j.name||'').toLowerCase() === name.toLowerCase())){
            judges.push({ name, ts: new Date().toISOString() });
            setList(K.judges, judges);
          }
          localStorage.setItem(K.selJudge, name);
          $('#judgeName').value = '';
          renderJudgesList();
          alert('Judge saved locally: ' + name);
        });
      }

      // Initial renders
      renderTeamsTable();
      renderJudgesList();
    });
  })();
  </script>
<script>
/* WHOLEHOG landing hotfix (local-only, DOM-safe)
   Targets exact IDs present on your page:
   #whBtnAddTeam, #whTeamName, #whSiteNumber, #chip, #legionFlag, #sonsFlag,
   #judgesList, #judgeForm, #judgeName
*/
(function(){
  // ---- localStorage keys ----
  const K = {
    teams: 'wh_Teams',
    judges: 'wh_Judges',
    selTeam: 'selectedTeamName',
    selJudge: 'selectedJudgeName',
    chipMap: 'wh_chipByTeam',
    blindA: 'blindEntries',
    blindB: 'blindScores',
    onsite: 'onsiteScores'
  };

  // ---- helpers ----
  const $ = (s,r)=> (r||document).querySelector(s);
  function getList(k){ try { return JSON.parse(localStorage.getItem(k)||'[]'); } catch { return []; } }
  function setList(k, v){ localStorage.setItem(k, JSON.stringify(v)); }
  function setJSON(k, v){ localStorage.setItem(k, JSON.stringify(v)); }
  function getJSON(k, fb){ try { return JSON.parse(localStorage.getItem(k) ?? 'null') ?? fb; } catch { return fb; } }

  // Chip check used by table
  function hasChip(team){
    if (!team) return false;
    const m = getJSON(K.chipMap, null);
    if (m && typeof m==='object' && String(m[team]||'').trim()!=='') return true;
    for (const key of [K.blindA, K.blindB, K.onsite]){
      const arr = getList(key);
      if (arr.some(r => ((r.team||r.teamName)||'')===team && String((r.chip||r.chip_number||'')).trim()!=='')) {
        return true;
      }
    }
    return false;
  }

  function renderTeamsTable(){
    const wrap = $('#whTeamsTableWrap');
    if (!wrap) return;
    const teams = getList(K.teams);
    if (!teams.length){ wrap.innerHTML = '<div class="muted">No teams yet.</div>'; return; }
    const anySite = teams.some(t => (t.site||'').trim()!=='');
    const head = `
      <tr>
        <th style="text-align:left;border-bottom:1px solid #ddd;padding:6px 4px;">Affiliation</th>
        <th style="text-align:left;border-bottom:1px solid #ddd;padding:6px 4px;">Team Name</th>
        ${anySite?'<th style="text-align:left;border-bottom:1px solid #ddd;padding:6px 4px;">Site #</th>':''}
        <th style="text-align:left;border-bottom:1px solid #ddd;padding:6px 4px;">Chip Entered</th>
      </tr>`;
    const rows = teams.map(t=>{
      const chip = hasChip(t.name) ? 'Yes' : 'No';
      return `
        <tr>
          <td style="padding:6px 4px;border-bottom:1px solid #eee;">${t.affiliation||''}</td>
          <td style="padding:6px 4px;border-bottom:1px solid #eee;">${t.name||''}</td>
          ${anySite?`<td style="padding:6px 4px;border-bottom:1px solid #eee;">${t.site||''}</td>`:''}
          <td style="padding:6px 4px;border-bottom:1px solid #eee;">${chip}</td>
        </tr>`;
    }).join('');
    wrap.innerHTML = `<table style="width:100%;border-collapse:collapse;"><thead>${head}</thead><tbody>${rows}</tbody></table>`;
  }

  function renderJudgesList(){
    const host = $('#judgesList');
    if (!host) return;
    const judges = getList(K.judges);
    if (!judges.length){ host.innerHTML = '<div class="muted">No judges yet.</div>'; return; }
    host.innerHTML = `<ul style="margin:8px 0 0; padding-left:16px;">${
      judges.map(j=>`<li>${j.name||''}</li>`).join('')
    }</ul>`;
  }

  // ---- 1) Neutralize legacy network handler that triggers "Failed to fetch" ----
  // Do not remove external scripts; just stop their click/submit from firing.
  const addTeamBtn = $('#whBtnAddTeam');
  if (addTeamBtn) {
    addTeamBtn.onclick = null; // clear inline/previous onclick if any
    addTeamBtn.addEventListener('click', e => { e.preventDefault(); e.stopImmediatePropagation(); }, true);
  }
  const judgeForm = $('#judgeForm');
  if (judgeForm) {
    judgeForm.addEventListener('submit', e => { e.preventDefault(); e.stopImmediatePropagation(); }, true);
  }

  // Optional: if some script still calls fetch, make it a no-op success (prevents “Failed to fetch” UI)
  if (window.fetch) {
    const okResponse = new Response('{"ok":true}', {status:200, headers:{'Content-Type':'application/json'}});
    const okGET      = new Response('[]', {status:200, headers:{'Content-Type':'application/json'}});
    const orig = window.fetch;
    window.fetch = function(input, init){
      const method = ((init && init.method) || 'GET').toUpperCase();
      return Promise.resolve(method==='GET' ? okGET.clone() : okResponse.clone());
    };
  }

  // ---- 2) Wire our local-only handlers (exact IDs on your page) ----
  if (addTeamBtn) {
    addTeamBtn.addEventListener('click', function(e){
      e.preventDefault(); e.stopImmediatePropagation();

      const nameEl = $('#whTeamName');
      const chipEl = $('#chip');
      const siteEl = $('#whSiteNumber');
      const legEl  = $('#legionFlag');
      const sonEl  = $('#sonsFlag');

      const name = String(nameEl && nameEl.value || '').trim();
      if (!name) { alert('Enter a team name.'); return false; }

      // Build/update team record
      const teams = getList(K.teams);
      const existing = teams.find(t => (t.name||'').toLowerCase() === name.toLowerCase());
      const aff = (legEl && legEl.checked ? 'Legion' : '') + (sonEl && sonEl.checked ? ( (legEl&&legEl.checked)?' & ':'') + 'Sons' : '');
      const site = String(siteEl && siteEl.value || '').trim();
      if (existing) {
        existing.affiliation = aff;
        existing.site = site;
      } else {
        teams.push({ name, affiliation: aff, site, ts: new Date().toISOString() });
      }
      setList(K.teams, teams);
      localStorage.setItem(K.selTeam, name);

      // Save chip mapping if provided (so "Chip Entered" shows Yes immediately)
      const chipVal = String(chipEl && chipEl.value || '').trim();
      if (chipVal) {
        const map = getJSON(K.chipMap, {}) || {};
        map[name] = chipVal;
        setJSON(K.chipMap, map);
      }

      // Clear input boxes & checkboxes after add
      if (nameEl) nameEl.value = '';
      if (chipEl) chipEl.value = '';
      if (siteEl) siteEl.value = '';
      if (legEl)  legEl.checked = false;
      if (sonEl)  sonEl.checked = false;

      renderTeamsTable();
      alert('Team saved locally: ' + name);
      return false;
    });
  }

  if (judgeForm) {
    judgeForm.addEventListener('submit', function(e){
      e.preventDefault(); e.stopImmediatePropagation();
      const nameEl = $('#judgeName');
      const name = String(nameEl && nameEl.value || '').trim();
      if (!name) { alert('Enter a judge name.'); return false; }
      const judges = getList(K.judges);
      if (!judges.some(j => (j.name||'').toLowerCase() === name.toLowerCase())){
        judges.push({ name, ts: new Date().toISOString() });
        setList(K.judges, judges);
      }
      localStorage.setItem(K.selJudge, name);
      if (nameEl) nameEl.value = '';
      renderJudgesList();
      alert('Judge saved locally: ' + name);
      return false;
    });
  }

  // ---- 3) First render on load ----
  document.addEventListener('DOMContentLoaded', function(){
    renderTeamsTable();
    renderJudgesList();
  });
})();
</script>
<script>
/* WholeHog Landing — precise local-only hotfix (no layout changes)
   Matches your DOM exactly: #whBtnAddTeam, #whTeamName, #whSiteNumber, #chip,
   #legionFlag, #sonsFlag, #whTeamsList, #judgeForm, #judgeName, #judgesList, #entries-viewer
*/
(function(){
  // ---- localStorage keys ----
  const K = {
    teams: 'wh_Teams',
    judges: 'wh_Judges',
    selTeam: 'selectedTeamName',
    selJudge: 'selectedJudgeName',
    chipMap: 'wh_chipByTeam',
    blindA: 'blindEntries',
    blindB: 'blindScores',
    onsite: 'onsiteScores'
  };

  // ---- helpers ----
  const $ = (s,r)=> (r||document).querySelector(s);
  function getList(k){ try { return JSON.parse(localStorage.getItem(k)||'[]'); } catch { return []; } }
  function setList(k, v){ localStorage.setItem(k, JSON.stringify(v)); }
  function getJSON(k, fb){ try { const v = localStorage.getItem(k); return v ? JSON.parse(v) : fb; } catch { return fb; } }
  function setJSON(k, v){ localStorage.setItem(k, JSON.stringify(v)); }

  // Remove the "Current Entries" card if present
  const entriesCard = document.getElementById('entries-viewer');
  if (entriesCard && entriesCard.parentNode) entriesCard.parentNode.removeChild(entriesCard);

  // Neutralize legacy network handlers that show "Failed to fetch"
  const addTeamBtn = $('#whBtnAddTeam');
  if (addTeamBtn){
    addTeamBtn.onclick = null; // clear inline handler if any
  }
  const judgeForm = $('#judgeForm');

  // Optional safety net: make any stray fetch() a no-op success
  if (window.fetch){
    const okRespGET = new Response('[]', {status:200, headers:{'Content-Type':'application/json'}});
    const okRespOK  = new Response('{"ok":true}', {status:200, headers:{'Content-Type':'application/json'}});
    window.fetch = function(input, init){
      const m = ((init&&init.method)||'GET').toUpperCase();
      return Promise.resolve(m==='GET'?okRespGET.clone():okRespOK.clone());
    };
  }

  // Chip presence across local stores
  function hasChip(team){
    if (!team) return false;
    const map = getJSON(K.chipMap, null);
    if (map && typeof map==='object' && String(map[team]||'').trim()!=='') return true;
    for (const key of [K.blindA, K.blindB, K.onsite]){
      const arr = getList(key);
      if (arr.some(r => ((r.team||r.teamName)||'')===team && String((r.chip||r.chip_number||'')).trim()!=='')) return true;
    }
    return false;
  }

  // Render Teams into your <ul id="whTeamsList"> with the columns requested
  function renderTeams(){
    const ul = $('#whTeamsList');
    if (!ul) return;
    const teams = getList(K.teams);

    if (!teams.length){
      ul.innerHTML = '';
      return;
    }

    // Build a simple row with visible columns
    ul.innerHTML = teams.map(t=>{
      const aff  = t.affiliation || '';
      const name = t.name || '';
      const site = (t.site||'').toString();
      const chip = hasChip(name) ? 'Yes' : 'No';
      return `<li style="padding:6px 4px;border-bottom:1px solid #eee;display:grid;grid-template-columns:160px 1fr 120px 120px;gap:8px;align-items:center;">
        <span><strong>${aff}</strong></span>
        <span>${name}</span>
        <span>${site}</span>
        <span>Chip Entered: <strong>${chip}</strong></span>
      </li>`;
    }).join('');
  }

  // Render Judges into your <div id="judgesList">
  function renderJudges(){
    const host = $('#judgesList');
    if (!host) return;
    const judges = getList(K.judges);
    if (!judges.length){ host.innerHTML = ''; return; }
    host.innerHTML = '<ul style="margin:8px 0 0; padding-left:16px;">' +
      judges.map(j => `<li>${j.name||''}</li>`).join('') + '</ul>';
  }

  // ---- Add Team (capture-phase: cancel legacy handler, do local save) ----
  if (addTeamBtn){
    addTeamBtn.addEventListener('click', function onAddTeam_capture(ev){
      ev.preventDefault(); ev.stopImmediatePropagation();

      const nameEl = $('#whTeamName');
      const chipEl = $('#chip');
      const siteEl = $('#whSiteNumber');
      const legEl  = $('#legionFlag');
      const sonEl  = $('#sonsFlag');

      const name = String(nameEl && nameEl.value || '').trim();
      if (!name){ alert('Enter a team name.'); return false; }

      // Upsert team locally
      const teams = getList(K.teams);
      let rec = teams.find(t => (t.name||'').toLowerCase() === name.toLowerCase());
      const aff = (legEl && legEl.checked ? 'Legion' : '') + (sonEl && sonEl.checked ? ((legEl&&legEl.checked)?' & ':'')+'Sons' : '');
      const site = String(siteEl && siteEl.value || '').trim();

      if (rec){ rec.affiliation = aff; rec.site = site; }
      else { rec = { name, affiliation: aff, site, ts: new Date().toISOString() }; teams.push(rec); }
      setList(K.teams, teams);
      localStorage.setItem(K.selTeam, name);

      // Save chip so "Chip Entered" = Yes immediately
      const chipVal = String(chipEl && chipEl.value || '').trim();
      if (chipVal){
        const cmap = getJSON(K.chipMap, {}) || {};
        cmap[name] = chipVal;
        setJSON(K.chipMap, cmap);
      }

      // Clear all inputs after add
      if (nameEl) nameEl.value = '';
      if (chipEl) chipEl.value = '';
      if (siteEl) siteEl.value = '';
      if (legEl)  legEl.checked = false;
      if (sonEl)  sonEl.checked = false;

      renderTeams();
      alert('Team saved locally: ' + name);
      return false;
    }, true); // capture = runs before any legacy handler
  }

  // ---- Add Judge (capture-phase submit on your #judgeForm) ----
  if (judgeForm){
    judgeForm.addEventListener('submit', function onJudgeSubmit_capture(ev){
      ev.preventDefault(); ev.stopImmediatePropagation();
      const nameEl = $('#judgeName');
      const name = String(nameEl && nameEl.value || '').trim();
      if (!name){ alert('Enter a judge name.'); return false; }

      const judges = getList(K.judges);
      if (!judges.some(j => (j.name||'').toLowerCase() === name.toLowerCase())){
        judges.push({ name, ts: new Date().toISOString() });
        setList(K.judges, judges);
      }
      localStorage.setItem(K.selJudge, name);
      if (nameEl) nameEl.value = '';
      renderJudges();
      alert('Judge saved locally: ' + name);
      return false;
    }, true);
  }

  // Initial render
  document.addEventListener('DOMContentLoaded', function(){
    renderTeams();
    renderJudges();
  });
})();
</script>


</body>
</html>
























